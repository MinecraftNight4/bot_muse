import:
	ch.njol.skript.lang.Variable
	java.security.MessageDigest
	java.math.BigInteger
	java.nio.file.Paths
	java.nio.file.Files
	java.nio.file.Path
	
	

effect store md5 in %~object% for file %string%:
	parse:
		expr-1 is an instance of Variable
		continue
	trigger:
		delay effect
		set {_file} to expr-2
		set {_pat} to Paths.get({_file})
		set {_bytes} to Files.readAllBytes({_pat})
		set {_md} to MessageDigest.getInstance("MD5")
		set {_digest} to {_md}.digest({_bytes})
		set {_hex} to new BigInteger(1, {_digest}).toString(16)
		while length of {_hex} < 32:
			set {_hex} to "0%{_hex}%"
		set raw expr-1 to {_hex} if {_hex} is set
		continue


command /mdmc_get:
	trigger:
		broadcast "ETA: %amount of values "album" of cached json "mod_album_plus" * 0.5%s"
		loop entries "album" of cached json "mod_album_plus":
			wait 10 ticks
			sync create file path "plugins/Skript/scripts/unzip/%loop-key%/test.zip"
			sync download file from url "https://mdmc.moe/api/v5/download/%loop-key%" to file path "plugins/Skript/scripts/unzip/%loop-key%/test.zip"
			sync unzip all files from file path "plugins/Skript/scripts/unzip/%loop-key%/test.zip" to directory path "plugins/Skript/scripts/unzip/%loop-key%"
		wait a second
		broadcast "[‚úÖ]INDEX -> [‚úÖ]GET -> [‚ùå]SET"
		execute console command "/mdmc_local"


command /mdmc_local:
	trigger:
		broadcast "ETA: %amount of values "album[]" of cached json "mod_album_plus" * 0.5%s"
		loop entries "album" of cached json "mod_album_plus":
			delete {_map::*}
			delete {_dat::*}
			link json file "plugins/Skript/scripts/unzip/%loop-key%/info.json" as "info"
			store md5 in {_map::1} for file "plugins/Skript/scripts/unzip/%loop-key%/map1.bms" if file path "plugins/Skript/scripts/unzip/%loop-key%/map1.bms" is available
			store md5 in {_map::2} for file "plugins/Skript/scripts/unzip/%loop-key%/map2.bms" if file path "plugins/Skript/scripts/unzip/%loop-key%/map2.bms" is available
			store md5 in {_map::3} for file "plugins/Skript/scripts/unzip/%loop-key%/map3.bms" if file path "plugins/Skript/scripts/unzip/%loop-key%/map3.bms" is available
			store md5 in {_map::4} for file "plugins/Skript/scripts/unzip/%loop-key%/map4.bms" if file path "plugins/Skript/scripts/unzip/%loop-key%/map4.bms" is available
			add value "difficulty1" of cached json "info" to {_dat::*} if (value "difficulty1" of cached json "info") != "0"
			add value "difficulty2" of cached json "info" to {_dat::*} if (value "difficulty2" of cached json "info") != "0"
			add value "difficulty3" of cached json "info" to {_dat::*} if (value "difficulty3" of cached json "info") != "0"
			add value "difficulty4" of cached json "info" to {_dat::*} if (value "difficulty4" of cached json "info") != "0"
			loop {_dat::*}:
				set {_lvl} to "-1"
				set {_lvl} to loop-value-2 if "%loop-value-2%" = "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14" or "15"
				json-kset "%loop-key-1%" at key "level::%{_lvl}%[]" for cached json "mod_album_plus"
			loop {_map::*}:
				set json value "lbs::%loop-key-1%::%loop-index%" in cached json "mod_board" to "%{_map::%loop-index%}%"
		
		sync delete directory path "plugins/Skript/scripts/unzip"
		broadcast "[‚úÖ]INDEX -> [‚úÖ]GET -> [‚úÖ]SET"
		save cached json "mod_album_plus"
		save cached json "mod_board"
		unlink json "info"
		stop











command /mdmc_index:
	trigger:
		json-fixer "https://mdmc.moe/api/v5/charts" and store {_data}
		broadcast "%{_data}%"
		#
		remove "level" from cached json "mod_album_plus"
		loop entries "data[]" of {_data}:
			set {_json} to loop-element
			set {_id} to value "id" of loop-element			
			#========================================================================== ADVANCED
			#------------------------------------------------ BPM
			set {_bpm} to value "bpm" of {_json}
			replace "ÔΩû", " - " and "-" in {_bpm} with "~"
			replace " " in {_bpm} with "~"
			set {_bpm::*} to {_bpm} split at "~"
			set json value "album::%{_id}%::bpm_mn" in cached json "mod_album_plus" to ({_bpm::1} parsed as number)
			set json value "album::%{_id}%::bpm_mx" in cached json "mod_album_plus" to ("%{_bpm::2} ? {_bpm::1}%" parsed as number)
			#------------------------------------------------ NAME
			delete {_lname::*}
			set {_lname::n} to value "name" of {_json}
			set {_lname::a} to value "author" of {_json}
			add values "searchTags" of {_json} to {_lname::*}
			set {_lname::r} to value "name_romanized" of {_json} if {_json} has key "name_romanized"
			set json value "album::%{_id}%::name" in cached json "mod_album_plus" to (join {_lname::*} with "   ")
			#------------------------------------------------ DESIGN
			delete {_ldes::*}
			add value "levelDesigner" of {_json} to {_ldes::*} if json-look {_json} for key "levelDesigner" is true
			loop 5 times:
				json-look {_json} for key "levelDesigner%loop-value-3%" is true
				add value "levelDesigner%loop-value-3%" of {_json} to {_ldes::*}
			set json value "album::%{_id}%::design" in cached json "mod_album_plus" to (join {_ldes::*} with "   ")
			#============================================================================= TRANSLATE
			#-------------------------------------------- NAME
			loop ("kr|en|jp|zh|zhs|es" split at "|"):
				set {_lname} to "üéµ%{_lname::n}%"
				set json value "name::%{_id}%::%loop-value-2%" in cached json "mod_album" to "%{_lname}%"

		save cached json "mod_album_plus"
		save cached json "mod_album"
		wait a second
		broadcast "[‚úÖ]INDEX -> [‚ùå]GET -> [‚ùå]SET"
		execute console command "/mdmc_get"
