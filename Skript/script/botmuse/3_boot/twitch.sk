import:
	ch.njol.skript.lang.Variable

effect oauth2-refresh:
	trigger:
		({twitch::oauth2::acexprs} ? 0) < rounded unix timestamp of now
		delay effect
		execute POST request to "https://id.twitch.tv/oauth2/token" with data "client_id: %bot_client%", "client_secret: %bot_secret%" and "grant_type: client_credentials"
		set {_json} to request's body
		set {twitch::oauth2::actoken} to value "access_token" of {_json}
		set {twitch::oauth2::acexprs} to rounded down unix timestamp of now
		add value "expires_in" of {_json} to {twitch::oauth2::acexprs}
		broadcast "[!] ENDPOINT PRINTED"
		continue

effect oauth2-category %~objects% hello %~objects%:
	parse:
		expr-1 is an instance of Variable
		expr-2 is an instance of Variable
		continue
	trigger:
		delay effect
		oauth2-refresh
		execute GET request to "https://api.twitch.tv/helix/streams?game_id=374711699&&first=100" with headers "Authorization: Bearer %bot_token%", "Client-Id: %bot_client%"
		set {_body} to request's body
		loop entries "data[]" of {_body}:
			json-look cached json "twitch" for key "banned::tv-%value "user_id" of loop-element%" is false
			set {_chanuid} to value "user_id" of loop-element
			set {_chalang} to value "language" of loop-element
			set {_channel} to value "user_login" of loop-element
			add {_channel} to {_meets::*} if {twitch::greets::%{_channel}%} is not set
			set {twitch::greets::%{_channel}%} to (rounded unix timestamp of now + 7200)
			set {twitch::watchs::%{_channel}%::id} to {_chanuid}
			set {twitch::watchs::%{_channel}%} to {_channel}
			mod-lang of {_channel} to {_chalang}
			add {_channel} to {_watch::*}
		
		set raw expr-1 to alphabetically sorted {_watch::*}
		set raw expr-2 to {_meets::*}
		continue



effect oauth2-chat read-sub %string%:
	trigger:
		broadcast "[!] Order: %expr-1%"
		twitch login to client "%bot_client%" with token "%bot_token%" with secret "%bot_secret%" to overview "%expr-1%"

effect oauth2-chat read %string%:
	trigger:
		delay effect
		if ({twitch::oauth2::ircends} ? 0) < rounded unix timestamp of now:
			execute POST request to "https://id.twitch.tv/oauth2/token" with data "client_id: %bot_client%", "client_secret: %bot_secret%", "refresh_token: %bot_ircload%" and "grant_type: refresh_token"
			set {_json} to request's body
			set {twitch::oauth2::irccode} to value "access_token" of {_json}
			set {twitch::oauth2::ircload} to value "refresh_token" of {_json}
			set {twitch::oauth2::ircends} to value "expires_in" of {_json} 
			add rounded unix timestamp of now - 600 to {twitch::oauth2::ircends}
			broadcast "[!] TOKEN PRINTED"
		oauth2-chat read-sub expr-1
		wait 10 seconds
		continue











effect oauth2 roll watch:
	trigger:
		broadcast "... [x1]"
		oauth2-category {_watch::*} hello {_greet::*}
		loop {twitch::greets::*}:
			unix timestamp of now > loop-value
			delete {twitch::watchs::%loop-index%::*}
			delete {twitch::watchs::%loop-index%}
			delete {twitch::greets::%loop-index%}
		
		stop if {twitch::watchs} = join {_watch::*} with ", "
		set {twitch::watchs} to join {_watch::*} with ", "
		broadcast "... [x2]"
		
		if size of {_watch::*} = 0:
			oauth2-chat read "mnight4"
			stop
		else:
			oauth2-chat read "%{twitch::watchs}%"
			broadcast "[%{_watch::*}%] %nl% %{_greet::*} ? " "%"
			loop {_greet::*}:
				oauth2-hello {_roll::*} for loop-value
				send "%random element of {_roll::*} ? " "%" to livechat "%loop-value%"
			

#------------------------------------------------------------------------------------------------------------------------------

#every 5 minutes:
#	oauth2 roll watch







on load:
	execute console command "skript reload /botmuse/3_boot/imp_panel.sk"