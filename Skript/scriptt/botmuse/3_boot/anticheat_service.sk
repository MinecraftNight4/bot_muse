import:
	ch.njol.skript.lang.Variable

effect anti-cheat ratelimit:
	trigger:
		delete {anticheat::prpr-ratelimit::*} if unix timestamp of now > {anticheat::prpr-ratelimit::break}
		add 1 to {anticheat::prpr-ratelimit::total}
		set {anticheat::prpr-ratelimit::break} to (rounded unix timestamp of now + 120)
		if {anticheat::prpr-ratelimit::total} > 70:
			delay effect
			broadcast "RATELIMIT!"
			wait 2 minutes
			delete {anticheat::prpr-ratelimit::*}
			continue
		broadcast "PASS"


effect json-form %string% and store %~object%:
	parse:
		expr-2 is an instance of Variable
		continue
	trigger:
		delay effect
		sync delete file path "plugins/musedash/temp_b.json"
		sync create file path "plugins/musedash/temp_b.json" with text "%expr-1%"
		link json file "plugins/musedash/temp_b.json" as "temp_b"
		set raw expr-2 to cached json "temp_b"
		unlink json "temp_b"
		continue


effect anticheat strike to %string% for song %string% with reason %string% and evidence %string%:
	trigger:
		set json value "hacker::%expr-1%::%expr-2%::strikes::%expr-3%" in cached json "mdac_hck" to true
		set json value "hacker::%expr-1%::%expr-2%::argmnts::%expr-3%" in cached json "mdac_hck" to expr-4




effect anticheat-pc inspect with level %number% of song %string%:
	trigger:
		send an http "GET" web request to the url "https://prpr-muse-dash.peropero.net/musedash/v1/pcleaderboard/top?music_uid=%expr-2%&music_difficulty=%expr-1%&limit=15&offset=0&version=3.2.0&platform=bot_muse"
		json-form response body and store {_json}
		#----------------------------------------------
		
		#BEST OF THE SONG
		add values "%expr-2%::%expr-1%[]" of cached json "mdac_bst" to {_builds::*}
		loop entries "result[]" of {_json}:
			set {_build} to "%value "play::character_uid" of loop-element%_%value "play::elfin_uid" of loop-element%"
			"%{_builds::*}% " doesn't contain "%{_build}% "
			anticheat strike to "%value "play::user_id" of loop-element%" for song "%expr-2%-%expr-1%" with reason "build" and evidence "%{_build}%"
		
		#STRANGE HEALTH
		loop entries "result[]" of {_json}:
			set {_health} to value "play::hp" of loop-element
			set {_sh::1} to value "health::muse::%value "play::character_uid" of loop-element%" of cached json "mdac_inf"
			set {_sh::2} to value "health::muse::%value "play::elfin_uid" of loop-element%" of cached json "mdac_inf"
			if {_health} > ({_sh::1}+{_sh::2}):
				anticheat strike to "%value "play::user_id" of loop-element%" for song "%expr-2%-%expr-1%" with reason "health_range" and evidence "%{_health}%"
			else if 1 > {_health}:
				anticheat strike to "%value "play::user_id" of loop-element%" for song "%expr-2%-%expr-1%" with reason "health_range" and evidence "%{_health}%"
		
		#LOWER COMBO
		loop entries "result[]" of {_json}:
			add 1 to {_combo-a::%value "play::combo" of loop-element%}
		set {_combos::*} to sorted indices of {_combo-a::*} in descending order
		set {_combos} to {_combos::1} parsed as number
		loop entries "result[]" of {_json}:
			set {_combo} to value "play::combo" of loop-element
			if value "play::miss" of loop-element != 0:
				anticheat strike to "%value "play::user_id" of loop-element%" for song "%expr-2%-%expr-1%" with reason "combo_range" and evidence "%{_combo}% / %{_combos::1}%"
			else if {_combo} > {_combos}:
				anticheat strike to "%value "play::user_id" of loop-element%" for song "%expr-2%-%expr-1%" with reason "combo_range" and evidence "%{_combo}% / %{_combos::1}%"
			else if {_combos} > {_combo}:
				anticheat strike to "%value "play::user_id" of loop-element%" for song "%expr-2%-%expr-1%" with reason "combo_range" and evidence "%{_combo}% / %{_combos::1}%"
		
		#HEALTH POPULAR********************************************
		set {_pop-hp::rank} to 16
		loop entries "result[]" of {_json}:
			add {_pop-hp::rank} to {_pop-hp1::%value "play::hp" of loop-element%}
			subtract 1 from {_pop-hp::rank}
		set {_pop-hp2::*} to sorted indices of {_pop-hp1::*} in descending order
		loop {_pop-hp2::*}:
			set {_pop-hp2::%loop-index%} to {_pop-hp2::%loop-index%} parsed as number
		set {_pop-hp::mn} to {_pop-hp2::1}
		set {_pop-hp::mx} to {_pop-hp2::1}
		if size of {_pop-hp2::*} > 2:
			loop {_pop-hp2::*}:
				loop {_pop-hp2::*}:
					set {_pop-hp::current} to loop-value-2
					if {_pop-hp::mn} > {_pop-hp::current}:
						set {_pop-hp::thold} to {_pop-hp::mn}-5
						set {_pop-hp::thold} to 1 if {_pop-hp::thold} < 1
						{_pop-hp::thold} <= loop-value-2
						set {_pop-hp::mn} to loop-value-2
					else if {_pop-hp::current} > {_pop-hp::mx}:
						set {_pop-hp::thold} to {_pop-hp::mx}+5
						set {_pop-hp::thold} to 200 if {_pop-hp::thold} > 199
						loop-value-2 <= {_pop-hp::thold}
						set {_pop-hp::mx} to loop-value-2
		#**********************************************************	
		loop entries "result[]" of {_json}:
			set {_hp} to value "play::hp" of loop-element
			if {_pop-hp::mn} > {_hp}:
				anticheat strike to "%value "play::user_id" of loop-element%" for song "%expr-2%-%expr-1%" with reason "health_range" and evidence "↓%{_hp}% -> [%{_pop-hp::mn}%~%{_pop-hp::mx}%]| %{_pop-hp2::*}%"
			if {_hp} > {_pop-hp::mx}:
				anticheat strike to "%value "play::user_id" of loop-element%" for song "%expr-2%-%expr-1%" with reason "health_range" and evidence "↑%{_hp}% -> [%{_pop-hp::mn}%~%{_pop-hp::mx}%]| %{_pop-hp2::*}%"

		#----------------------------------------------
		save cached json "mdac_hck"
		

on load:
	anticheat-pc inspect with level 3 of song "61-0"
	
		


