import:
	ch.njol.skript.lang.Variable

effect profilemod-name %~object% to %~string%:
	parse:
		expr-1 is an instance of Variable # making sure the input is a variable, optional
		continue
	trigger:
		delay effect
		execute GET request to "https://api.musedash.moe/mdmc/search/%uncolored expr-2%"
		set {_json} to request's body
		#
		loop entries of {_json}:
			loop entries of loop-element:
				"%loop-key-2%" is "1"
				set raw expr-1 to loop-element-2
				continue
				stop
		continue

effect profilemod-uid %~object% to %~string% for %string% as %string%:
	parse:
		expr-1 is an instance of Variable
		continue
	trigger:
		delay effect
		execute GET request to "https://mdmc.moe/api/v5/user/%uncolored expr-2%" if expr-2 is set
		set {_json} to request's body
		if value "error" of {_json} != "User not found":
			expr-2 is set
			set {_link} to "https://mdmc.moe/user/%expr-2% " if see-json "twitch" have key "stream::tv-%expr-4%::links" is true
			set {_user::songs} to value "top_scores[1]::chart::cover" of {_json}
			replace "/webp/" in {_user::songs} with ""
			
			#
			set {_user::muses} to get-json "game_obj" have key "muse::%value "top_scores[1]::character_uid" of {_json}%"
			set {_user::hards} to get-json "game_obj" have key "diff::%value "top_scores[1]::chart::type" of {_json}%"
			set {_user::elfin} to get-json "game_obj" have key "elfin::%value "top_scores[1]::elfin_uid" of {_json}%"
			set {_user::songs} to music ({_user::songs} split at "_") from streamer expr-3 with length of 14
			set {_user::score} to value "top_scores[1]::score" of {_json}
			set {_user::leads} to value "top_scores[1]::rank" of {_json}
			set {_user::acurr} to value "top_scores[1]::acc" of {_json}
			set {_user::pgold} to value "all_perfects" of {_json}
			set {_user::paccy} to value "accuracy" of {_json}
			set {_user::prank} to value "rank" of {_json}
			set {_user::pname} to value "name" of {_json}
			
			
			set raw expr-1 to "──────────────────────────────── 📜%{_user::pname}%️ ️ 🏆%{_user::pgold}%️ ️ 🎯%{_user::paccy}%️ ️ 🌐##%{_user::prank}% ──────────────────────────────── ️ 🏅%{_user::leads}%️ ️ 🎯%{_user::acurr}%%%️ ️ 🎮%{_user::score}%️ ️ 💠%{_user::muses}%%{_user::elfin}%️ ️ ️ ️ ️ ️ ️ ️ [%{_user::songs}% %{_user::hards}%" if {_user::pname} is set
		continue


skitch command layer [<text>]:
	prefixes: _p
	trigger:
		log "[MDMC]: (C:%event-livechannel%|U:%event-liveuser%-> %arg-1%)%nl%ENABLE: %{twitch::watchs::%event-livechannel%::cd}% %nl%UNIX TM: %rounded unix timestamp of now%" to "player_mc.log"
		#
		cooldown of 6 to event-livechannel
		if arg-1 is not set:
			mod-translate for event-livechannel to "_player::help" and save {_output}
			
		else if arg-1 partially matches "\d{17,}":
			profilemod-uid {_output} to arg-1 for event-livechannel as event-livechannelid
			
		else:
			mod-translate for event-livechannel to "_player::wait" and save {_look}
			twitch reply with "%{_look}%"
			profilemod-name {_data} to uncolored arg-1
			profilemod-uid {_output} to {_data} for event-livechannel as event-livechannelid
		#
		mod-translate for event-livechannel with args first 16 characters of arg-1 to "_player::error" and save {_output} if {_output} is not set
		twitch reply with "%{_output}%"
		stop
