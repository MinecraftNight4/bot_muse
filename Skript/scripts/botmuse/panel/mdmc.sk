import:
	ch.njol.skript.lang.Variable
	java.security.MessageDigest
	java.math.BigInteger
	java.nio.file.Paths
	java.nio.file.Files
	java.nio.file.Path
	
	

effect store md5 in %~object% for file %string%:
	parse:
		expr-1 is an instance of Variable
		continue
	trigger:
		delay effect
		set {_file} to expr-2
		set {_pat} to Paths.get({_file})
		set {_bytes} to Files.readAllBytes({_pat})
		set {_md} to MessageDigest.getInstance("MD5")
		set {_digest} to {_md}.digest({_bytes})
		set {_hex} to new BigInteger(1, {_digest}).toString(16)
		while length of {_hex} < 32:
			set {_hex} to "0%{_hex}%"
		set raw expr-1 to {_hex} if {_hex} is set
		continue


command /mdmc_get:
	trigger:
		broadcast "ETA: %amount of values "name[]" of cached json "mod_album_plus" * 0.5%s"
		loop entries "name" of cached json "mod_album_plus":
			wait 10 ticks
			sync create file path "plugins/Skript/scripts/unzip/%loop-key%/test.zip"
			sync download file from url "https://mdmc.moe/api/v5/download/%loop-key%" to file path "plugins/Skript/scripts/unzip/%loop-key%/test.zip"
			sync unzip all files from file path "plugins/Skript/scripts/unzip/%loop-key%/test.zip" to directory path "plugins/Skript/scripts/unzip/%loop-key%"
		broadcast "[‚úÖ]INDEX -> [‚úÖ]GET -> [‚ùå]SET"
		execute console command "/mdmc_local"


command /mdmc_local:
	trigger:
		broadcast "ETA: %amount of values "name[]" of cached json "mod_album_plus" * 0.5%s"
		loop entries "name" of cached json "mod_album_plus":
			delete {_map::*}
			delete {_dat::*}
			link json file "plugins/Skript/scripts/unzip/%loop-key%/info.json" as "info"
			store md5 in {_map::1} for file "plugins/Skript/scripts/unzip/%loop-key%/map1.bms" if file path "plugins/Skript/scripts/unzip/%loop-key%/map1.bms" is available
			store md5 in {_map::2} for file "plugins/Skript/scripts/unzip/%loop-key%/map2.bms" if file path "plugins/Skript/scripts/unzip/%loop-key%/map2.bms" is available
			store md5 in {_map::3} for file "plugins/Skript/scripts/unzip/%loop-key%/map3.bms" if file path "plugins/Skript/scripts/unzip/%loop-key%/map3.bms" is available
			store md5 in {_map::4} for file "plugins/Skript/scripts/unzip/%loop-key%/map4.bms" if file path "plugins/Skript/scripts/unzip/%loop-key%/map4.bms" is available
			add value "difficulty1" of cached json "info" to {_dat::*} if (value "difficulty1" of cached json "info") != "0"
			add value "difficulty2" of cached json "info" to {_dat::*} if (value "difficulty2" of cached json "info") != "0"
			add value "difficulty3" of cached json "info" to {_dat::*} if (value "difficulty3" of cached json "info") != "0"
			add value "difficulty4" of cached json "info" to {_dat::*} if (value "difficulty4" of cached json "info") != "0"
			loop {_dat::*}:
				nest-json "%loop-key-1%" at "level::%loop-value-2%" of cached "mod_album_plus"
			loop {_map::*}:
				set json value "lbs::%loop-key-1%::%loop-index%" in cached json "mod_board" to "%{_map::%loop-index%}%"
		
		sync delete directory path "plugins/Skript/scripts/unzip"
		broadcast "[‚úÖ]INDEX -> [‚úÖ]GET -> [‚úÖ]SET"
		save cached json "mod_album_plus"
		save cached json "mod_board"
		unlink json "info"
		stop











command /mdmc_index:
	trigger:
		json-fixer "https://mdmc.moe/api/v5/charts" and store {_data}
		remove "name" from cached json "mod_album"
		remove "name" from cached json "mod_album_plus"
		remove "design" from cached json "mod_album_plus"
		remove "level" from cached json "mod_album_plus"
		loop entries "data[]" of {_data}:
			set {_json} to loop-element
			set {_id} to value "id" of loop-element
	
			#NAME - BY
			delete {_data::*}
			set {_data::n} to "%value "name" of {_json}%"
			set {_data::a} to "%value "author" of {_json}%"
			set {_data::r} to "%value "name_romanized" of {_json}% " if {_json} has key "name_romanized"
			set json value "name::%{_id}%" in cached json "mod_album_plus" to "%join {_data::*} with "   "% "
			loop ("kr|en|jp|zh|zhs|es" split at "|"):
				set json value "name::%{_id}%::%loop-value-2%" in cached json "mod_album" to "üéµ%{_data::n}%"
			
			#DESIGN
			set json value "design::%{_id}%" in cached json "mod_album_plus" to "|%value "levelDesigner" of {_json} ? ""% %value "levelDesigner1" of {_json} ? ""% %value "levelDesigner2" of {_json} ? ""% %value "levelDesigner3" of {_json} ? ""% %value "levelDesigner4" of {_json} ? ""% %value "levelDesigner5" of {_json} ? ""%"
			
			#BPM
			if "%value "bpm" of {_json}%" contain "~", "-" or "ÔΩû":
				set {_e} to value "bpm" of {_json}
				replace "ÔΩû" and "-" in {_e} with "~"
				set {_bpm::*} to {_e} split at "~"
				set json value "beats::%{_id}%::min" in cached json "mod_album_plus" to ({_bpm::1} parsed as number)
				set json value "beats::%{_id}%::max" in cached json "mod_album_plus" to ({_bpm::2} parsed as number)
			else:
				set json value "beats::%{_id}%::min" in cached json "mod_album_plus" to ("%value "bpm" of {_json}%" parsed as number)
				set json value "beats::%{_id}%::max" in cached json "mod_album_plus" to ("%value "bpm" of {_json}%" parsed as number)
			
		save cached json "mod_album_plus"
		save cached json "mod_album"
		broadcast "[‚úÖ]INDEX -> [‚ùå]GET -> [‚ùå]SET"
		execute console command "/mdmc_get"






