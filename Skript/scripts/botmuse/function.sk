import:
	ch.njol.skript.lang.Variable

expression see-json %string% have key %string%:
	get:
		set {_data} to element expr-2 from cached json expr-1
		return true if {_data} is set
		return false

expression get-json %string% have key %string%:
	get:
		set {_data} to element expr-2 from cached json expr-1
		return {_data} if {_data} is set

expression round %number% to %integer%:
	get:
		set {_dec} to expression-1
		set {_rem} to expression-2 + 2
		set {_dec} to (first {_rem} characters of "%{_dec} - rounded down expression-1%") parsed as number
		return {_dec} + rounded down expression-1

expression badge %string% have %string%:
	get:
		set {_check} to "%expr-2%"
		set {_in::*} to expr-1
		loop {_in::*}:
			loop-value is {_check}
			return true
		return false


expression short %string% at %number%:
	get:
		set {_base} to "%expr-1%"
		set {_w::*} to {_base} split at ""
		if expr-2 > 0:
			if {_w::%expr-2%} is " ":
				set {_w::%expr-2%} to ""
				set {_base} to join {_w::*} with ""
				delete {_w::*}
				set {_w::*} to {_base} split at ""
			if size of {_w::*} > expr-2:
				loop expr-2 times:
					set {_short} to "%{_short} ? ""%%{_w::%loop-value%}%"
				set {_short} to "%{_short}%..."
		return "%{_short} ? {_base}%"

expression format unix %~object%:
	get:
		set {_wrte} to "%expr-2%" parsed as number
		set {_timer} to ({_wrte} - rounded unix timestamp of now)
		while {_timer} > 1:
			if {_timer} >= 31556926:
				subtract 31556926 from {_timer}
				add 1 to {_y}
			else if {_timer} >= 2629743:
				subtract 2629743 from {_timer}
				add 1 to {_mo}
			else if {_timer} >= 86400:
				subtract 86400 from {_timer}
				add 1 to {_d}
			else if {_timer} >= 3600:
				subtract 3600 from {_timer}
				add 1 to {_h}
			else if {_timer} >= 60:
				subtract 60 from {_timer}
				add 1 to {_m}
			else:
				add {_timer} to {_s}
				set {_timer} to 0
		set {_write} to "%{_h} ? 0%h %{_m} ? 0%m %{_s} ? 0%s" 
		set {_write} to "%{_d} ? 0%d %{_h} ? 0%h %{_m} ? 0%m" if {_d} is set
		set {_write} to "%{_mo} ? 0%M %{_d} ? 0%d %{_h} ? 0%h" if {_mo} is set
		set {_write} to "%{_y} ? 0%Y %{_mo} ? 0%M %{_d} ? 0%d" if {_y} is set
		return {_write}


expression music %strings% of album %string% from streamer %string% with length of %number%:
	get:
		set {_uids::*} to expr-1
		loop {_uids::*}:
			set {_json} to element "name:%loop-value%:%{twitch::watchs::%expr-1%::lang} ? "en"%" from cached json expr-2
			set {_json} to element "name:%loop-value%" from cached json expr-2 if {_json} is not set
			delete {_short}
			if expr-4 > 0:
				set {_short} to short {_json} at expr-4
			add "%{_short} ? {_json}%" to {_m::*}
		return {_m::*}


effect music-filter %string% to save %~objects% %~objects% %~object% %~object% %~string%:
	parse:
		expr-2 is an instance of Variable
		expr-3 is an instance of Variable
		expr-4 is an instance of Variable
		expr-5 is an instance of Variable
		expr-6 is an instance of Variable
		continue
	trigger:
		delay effect
		set {_input::*} to "%expr-1%" split at " "
		#---------------------------------------------------------------------	
		loop {_input::*}:
			#DIFFICULTY
			delete {_split::*}
			if loop-value partially matches "^lvl:(1[0-5]|[1-9])-(1[0-5]|[1-9])$":
				delete {_input::%loop-index%}
				size of {_dif::*} = 0
				set {_split::*} to loop-value split at "-"
				replace "lvl:" in {_split::*} with ""
				add {_split::1} parsed as number to {_dif::*}
				add {_split::2} parsed as number to {_dif::*}
			#BPM
			else if loop-value partially matches "^bpm:(?:[1-9]|[1-9][0-9]{1,2}|[1-9][0-9]{3}|101[0-5])-(?:[1-9]|[1-9][0-9]{1,2}|[1-9][0-9]{3}|101[0-5])$":
				delete {_input::%loop-index%}
				size of {_bpm::*} = 0
				set {_split::*} to loop-value split at "-"
				replace "bpm:" in {_split::*} with ""
				add {_split::1} parsed as number to {_bpm::*}
				add {_split::2} parsed as number to {_bpm::*}
			#DESIGNER
			else if loop-value partially matches "^des:.*":
				delete {_input::%loop-index%}
				{_des} is not set
				set {_des} to loop-value
				replace "des:" in {_des} with ""
			#AUTHOR
			else if loop-value partially matches "^by:.*":
				delete {_input::%loop-index%}
				{_mby} is not set
				set {_mby} to loop-value
				replace "by:" in {_mby} with ""
		#---------------------------------------------------------------------
		set raw expr-2 to {_bpm::*} ? "*"
		set raw expr-3 to {_dif::*} ? "*"
		set raw expr-4 to {_des} ? "*"
		set raw expr-5 to {_mby} ? "*"
		set raw expr-6 to join {_input::*} with " "
		continue


effect mod-lang of %string% to %string%:
	trigger:
		set {_id} to {twitch::watchs::%expr-1%::id}
		set {_iso} to expr-2
		set {_iso} to "en" if {_iso} is not "en", "kr", "jp" or "zh"
		#
		set {_lang} to element "stream:%{_id}%_:lang" from cached json "twitch"
		set {twitch::watchs::%expr-1%::lang} to {_lang} ? "%{_iso}%"


condition cooldown of %number% to %string%:
	check:
		rounded unix timestamp of now >= ({twitch::watchs::%expr-2%::cd} otherwise 0)
		set {_extra} to element "streamer:%{twitch::watchs::%expr-2%::id}%_:cooldown" from cached json "twitch"
		set {twitch::watchs::%expr-2%::cd} to rounded unix timestamp of now
		add ({_extra} ? 0) to {twitch::watchs::%expr-2%::cd}
		add expr-1 to {twitch::watchs::%expr-2%::cd}
		continue

condition badge %string% is mod:
	check:
		set {_bd::*} to expr-1
		loop {_bd::*}:
			loop-value is "MODERATOR" or "STREAMER"
			continue
