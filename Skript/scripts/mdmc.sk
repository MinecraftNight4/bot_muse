import:
	ch.njol.skript.lang.Variable
	java.security.MessageDigest
	java.math.BigInteger
	java.nio.file.Paths
	java.nio.file.Files
	java.nio.file.Path
	
	

effect store md5 in %~object% for file %string%:
	parse:
		expr-1 is an instance of Variable
		continue
	trigger:
		delay effect
		set {_file} to expr-2
		set {_pat} to Paths.get({_file})
		set {_bytes} to Files.readAllBytes({_pat})
		set {_md} to MessageDigest.getInstance("MD5")
		set {_digest} to {_md}.digest({_bytes})
		set {_hex} to new BigInteger(1, {_digest}).toString(16)
		while length of {_hex} < 32:
			set {_hex} to "0%{_hex}%"
		set raw expr-1 to {_hex} if {_hex} is set
		continue

command /mdmc-index:
	trigger:
		send a "get" request to "https://mdmc.moe/api/v5/charts"
		set {_get} to last response's body
		map {_get} to {_json::*}
		#
		loop indices of {_json::*}:
			loop-value != "*"
			
			set {_name} to {_json::%loop-value%::name}
			set {_name} to "%first 14 characters of {_name}%..." if length of {_name} > 14
			set {_desg} to {_json::%loop-value%::levelDesigner}
			set {_desg} to "%first 14 characters of {_desg}%..." if length of {_desg} > 14
			#
			append "%{_json::%loop-value%::id}%" as nested object "ind[]" to cached json "album_mod"
			append "**NAME: %{_json::%loop-value%::name}% **ARTIST: %{_json::%loop-value%::author}% **DESIGN: %{_json::%loop-value%::levelDesigner}% **TAG: %{_json::%loop-value%::searchTags} ? "??????"%" with key "%{_json::%loop-value%::id}%" as nested object "see" to cached json "album_mod"
			append "üé∂%{_name}% ‚úèÔ∏è%{_desg}%" with key "%{_json::%loop-value%::id}%" as nested object "out" to cached json "album_mod"
			append "üé∂%{_name}%" with key "%{_json::%loop-value%::id}%" as nested object "nam" to cached json "album_mod"
			wait a tick
		broadcast "MDMC Updated!"
		save cached json "album_mod"


command /mdmc-board:
	trigger:
		set {_ind::*} to elements "ind[]" from cached json "album_mod"
		loop {_ind::*}:
			async delete directory path "plugins/Skript/scripts/unzip"
			wait 10 ticks
			async create file path "plugins/Skript/scripts/unzip/test.zip"
			wait 10 ticks
			sync download file from url "https://mdmc.moe/api/v5/download/%loop-value%" to file path "plugins/Skript/scripts/unzip/test.zip"
			sync unzip all files from file path "plugins/Skript/scripts/unzip/test.zip" to directory path "plugins/Skript/scripts/unzip"
			broadcast "%loop-index%/%size of {_ind::*}% [1/3]"
			
			
			store md5 in {_map::1} for file "plugins/Skript/scripts/unzip/map1.bms" if file path "plugins/Skript/scripts/unzip/map1.bms" is available
			store md5 in {_map::2} for file "plugins/Skript/scripts/unzip/map2.bms" if file path "plugins/Skript/scripts/unzip/map2.bms" is available
			store md5 in {_map::3} for file "plugins/Skript/scripts/unzip/map3.bms" if file path "plugins/Skript/scripts/unzip/map3.bms" is available
			store md5 in {_map::4} for file "plugins/Skript/scripts/unzip/map4.bms" if file path "plugins/Skript/scripts/unzip/map4.bms" is available
			broadcast "%loop-index%/%size of {_ind::*}% [2/3]"
			
			loop {_map::*}:
				append "%{_map::%loop-index-2%}%" with key "m%loop-index-2%" as nested object "lbs:%loop-value-1%" to cached json "album_mod"
			delete {_map::*}
			broadcast "%loop-index%/%size of {_ind::*}% [3/3]"
			wait 2 seconds

		broadcast "MDMC Leaderboards updated!"
		save cached json "album_mod"



